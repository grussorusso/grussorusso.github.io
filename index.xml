<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gabriele Russo Russo</title><link>https://grussorusso.github.io/</link><description>Recent content on Gabriele Russo Russo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://grussorusso.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>A Multi-level Elasticity Framework for Distributed Data Stream Processing</title><link>https://grussorusso.github.io/publications/autodasp18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/autodasp18/</guid><description>Data Stream Processing (DSP) applications should be capable to efficiently process high-velocity continuous data streams by elastically scaling the parallelism degree of their operators so to deal with high variability in the workload. Moreover, to efficiently use computing resources, modern DSP frameworks should seamlessly support infrastructure elasticity, which allows to exploit resources available on-demand in geo-distributed Cloud and Fog systems. In this paper we propose E2DF, a framework to autonomously control the multi-level elasticity of DSP applications and the underlying computing infrastructure.</description></item><item><title>AI-driven Performance Management in Data-Intensive Applications</title><link>https://grussorusso.github.io/publications/bookai2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/bookai2021/</guid><description/></item><item><title>Auto-scaling in Data Stream Processing: a Model Based Reinforcement Learning Approach</title><link>https://grussorusso.github.io/publications/infq17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/infq17/</guid><description>By exploiting on-the-fly computation, Data Stream Processing (DSP) applications can process huge volumes of data in a near real-time fashion. Adapting the application parallelism at run-time is critical in order to guarantee a proper level of QoS in face of varying workloads. In this paper, we consider Reinforcement Learning based techniques in order to self-configure the number of parallel instances for a single DSP operator. Specifically, we propose two model-based approaches and compare them to the baseline Q-learning algorithm.</description></item><item><title>Decentralized self-adaptation for elastic Data Stream Processing</title><link>https://grussorusso.github.io/publications/fgcs18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/fgcs18/</guid><description>Data Stream Processing (DSP) applications are widely used to develop new pervasive services, which require to seamlessly process huge amounts of data in a near real-time fashion. To keep up with the high volume of daily produced data, these applications need to dynamically scale their execution on multiple computing nodes, so to process the incoming data flow in parallel. In this paper, we present a hierarchical distributed architecture for the autonomous control of elastic DSP applications.</description></item><item><title>Elastic Pulsar Functions for Distributed Stream Processing</title><link>https://grussorusso.github.io/publications/autodasp21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/autodasp21/</guid><description>An increasing number of data-driven applications rely on the ability of processing data flows in a timely manner, exploiting for this purpose Data Stream Processing~(DSP) systems. Elasticity is an essential feature for DSP systems, as workload variability calls for automatic scaling of the application processing capacity, to avoid both overload and resource wastage. In this work, we implement auto-scaling in Pulsar Functions, a function-based streaming framework built on top of Apache Pulsar.</description></item><item><title>MEAD: Model-based Vertical Auto-Scaling for Data Stream Processing</title><link>https://grussorusso.github.io/publications/ccgrid2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/ccgrid2021/</guid><description>The unpredictable variability of Data Stream Processing (DSP) application workloads calls for advanced mechanisms and policies for elastically scaling the processing capacity of DSP operators. Whilst many different approaches have been used to devise policies, most of the solutions have focused on data arrival rate and operator resource utilization as key metrics for auto-scaling. We here show that, under burstiness in the data flows, overly simple characterizations of the input stream can yet lead to very inaccurate performance estimations that affect such policies, resulting in sub-optimal resource allocation.</description></item><item><title>Model-based Auto-Scaling of Distributed Data Stream Processing Applications</title><link>https://grussorusso.github.io/publications/middleware2020/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/middleware2020/</guid><description>Data Stream Processing (DSP) enables near real-time analysis of fast data streams, produced, e.g., by Internet-of-Things devices. Distributed DSP systems exploit distributed computing infrastructures, possibly spanning both Cloud and Fog/Edge platforms, to scale their execution and cope with high-volume streams. To avoid resource under-provisioning or wastage in face of highly variable workloads, DSP applications should elastically acquire and release resources as needed. In this doctoral work we investigate mechanisms and policies to auto-scale DSP applications.</description></item><item><title>Multi-Level Elasticity for Wide-Area Data Streaming Systems: A Reinforcement Learning Approach</title><link>https://grussorusso.github.io/publications/mdpi18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/mdpi18/</guid><description>The capability of efficiently processing the data streams emitted by nowadays ubiquitous sensing devices enables the development of new intelligent services. Data Stream Processing (DSP) applications allow for processing huge volumes of data in near real-time. To keep up with the high volume and velocity of data, these applications can elastically scale their execution on multiple computing resources to process the incoming data flow in parallel. Being that data sources and consumers are usually located at the network edges, nowadays the presence of geo-distributed computing resources represents an attractive environment for DSP.</description></item><item><title>Optimal operator deployment and replication for elastic distributed data stream processing</title><link>https://grussorusso.github.io/publications/ccpe18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/ccpe18/</guid><description>Processing data in a timely manner, data stream processing (DSP) applications are receiving an increasing interest for building new pervasive services. Due to the unpredictability of data sources, these applications often operate in dynamic environments; therefore, they require the ability to elastically scale in response to workload variations. In this paper, we deal with a key problem for the effective runtime management of a DSP application in geo‚Äêdistributed environments: We investigate the placement and replication decisions while considering the application and resource heterogeneity and the migration overhead, so to select the optimal adaptation strategy that can minimize migration costs while satisfying the application quality of service (QoS) requirements.</description></item><item><title>Real-Time Analysis of Market Data Leveraging Apache Flink</title><link>https://grussorusso.github.io/publications/debs22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/debs22/</guid><description>In this paper, we present a solution to the DEBS 2022 Grand Challenge (GC). According to the GC requirements, the proposed software continuously observes notifications about financial instruments being traded, aiming to timely detect breakout patterns. Our solution leverages Apache Flink, an open-source, scalable stream processing platform, which allows us to process incoming data streams with low latency and exploit the parallelism offered by the underlying computing infrastructure.</description></item><item><title>Reinforcement learning based policies for elastic stream processing on heterogeneous resources</title><link>https://grussorusso.github.io/publications/debs19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/debs19/</guid><description>Data Stream Processing (DSP) has emerged as a key enabler to develop pervasive services that require to process data in a near real-time fashion. DSP applications keep up with the high volume of produced data by scaling their execution on multiple computing nodes, so as to process the incoming data flow in parallel. Workloads variability requires to elastically adapt the application parallelism at run-time in order to avoid over-provisioning. Elasticity policies for DSP have been widely investigated, but mostly under the simplifying assumption of homogeneous infrastructures.</description></item><item><title>Run-Time Adaptation of Data Stream Processing Systems: The State of the Art</title><link>https://grussorusso.github.io/publications/csur2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/csur2022/</guid><description>Data Stream Processing (DSP) has emerged over the years as the reference paradigm for the analysis of continuous and fast information flows, which have often to be processed with low-latency requirements to extract insights and knowledge from raw data. Dealing with unbounded data flows, DSP applications are typically long-running and, thus, likely experience varying workloads and working conditions over time. To keep a consistent service level in face of such variability, a lot of effort has been spent studying strategies for run-time adaptation of DSP systems and applications.</description></item><item><title>Self-Adaptive Data Stream Processing in Geo-Distributed Computing Environments</title><link>https://grussorusso.github.io/publications/debs19doctsymp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/debs19doctsymp/</guid><description>An ever increasing number of services requires real-time analysis of collected data streams. Emerging Fog/Edge computing platforms are appealing for such latency-sensitive applications, encouraging the deployment of Data Stream Processing (DSP) systems in geo-distributed environments. However, the highly dynamic nature of these infrastructures poses challenges on how to satisfy the Quality of Service requirements of both the application and the infrastructure providers.
In this doctoral work we investigate how DSP systems can face the dynamicity of workloads and computing environments by self-adapting their deployment and behavior at run-time.</description></item><item><title>Serverledge: Decentralized Function-as-a-Service for the Edge-Cloud Continuum</title><link>https://grussorusso.github.io/publications/percom2023/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/percom2023/</guid><description>As the Function-as-a-Service (FaaS) paradigm enjoys growing popularity within Cloud-based systems, there is increasing interest in moving serverless functions towards the Edge, to better support geo-distributed and pervasive applications. However, enjoying both the reduced latency of Edge and the scalability of FaaS is not straightforward, calling for new architectures and implementations to cope with Edge challenges (e.g., nodes with limited computational capacity). While first solutions have been proposed for Edge-based FaaS, including light function sandboxing techniques, we lack a platform with the ability to span both Edge and Cloud and adaptively exploit both.</description></item><item><title>Serverless functions in the cloud-edge continuum: Challenges and opportunities</title><link>https://grussorusso.github.io/publications/pdp2023/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/pdp2023/</guid><description>The Function-as-a-Service (FaaS) paradigm is increasingly adopted for the development of Cloud-native applications, which especially benefit from the seamless scalability and attractive pricing models of serverless deployments. With the continuous emergence of latency-sensitive applications and services, including Internet-of-Things and augmented reality, it is now natural to wonder whether and how the FaaS paradigm can be efficiently exploited in the Cloud-Edge Continuum, where serverless functions may benefit from reduced network delay between their invoking users and the FaaS platform.</description></item><item><title>Software</title><link>https://grussorusso.github.io/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/software/</guid><description>Serverledge A Function-as-a-Service framework designed for Edge-Cloud environments, presented at IEEE PerCom &amp;lsquo;23. Written in Go.
GitHub</description></item><item><title>Teaching</title><link>https://grussorusso.github.io/teaching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/teaching/</guid><description>In the current academic year, I teach the following courses:
Fundamentals of Programming and Data Analytics, 3 out of 9 ECTS (BSc in Aeronautics Engineering), at Roma Tre University Hands-on Cloud Computing Services, supplementary course (10 hours) (MSc in Computer Science), at University of Rome Tor Vergata Check my CV for more information about courses I taught in the past and other teaching activities I am involved in.</description></item><item><title>Towards a Security-aware Deployment of Data Streaming Applications in Fog Computing</title><link>https://grussorusso.github.io/publications/booksecurity2020/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/booksecurity2020/</guid><description>Emerging fog and edge computing environments enable the analysis of Big Data collected from devices (e.g., IoT sensors) with reduced latency compared to cloud-based solutions. In particular, many applications deal with continuous data flows in latency-sensitive domains (e.g., healthcare monitoring), where Data Stream Processing (DSP) systems represent a popular solution. However, the highly heterogeneous nature of fog/edge platforms poses several challenges for efficiently deploying DSP applications, including security and privacy issues.</description></item><item><title>Towards Decentralized Auto-Scaling Policies for Data Stream Processing Applications</title><link>https://grussorusso.github.io/publications/zeus18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/zeus18/</guid><description>Data Stream Processing applications can process large data volumes in near real-time. In order to face varying workloads in a scalable and cost-effective manner, it is critical to adjust the application parallelism at run-time. We formulate the elasticity problem as a Markov Decision Process (MDP). As the MDP resolution requires full knowledge of the system dynamics, which is rarely available, we rely on model based Reinforcement Learning to improve the scaling policy at run-time.</description></item><item><title>Towards hierarchical autonomous control for elastic data stream processing in the fog</title><link>https://grussorusso.github.io/publications/autodasp17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/autodasp17/</guid><description>In the Big Data era, Data Stream Processing (DSP) applications should be capable to seamlessly process huge amount of data. Hence, they need to dynamically scale their execution on multiple computing nodes so to adjust to unpredictable data source rate. In this paper, we present a hierarchical and distributed architecture for the autonomous control of elastic DSP applications. It revolves around a two layered approach. At the lower level, distributed components issue requests for adapting the deployment of DSP operations as to adjust to changing workload conditions.</description></item><item><title>Towards QoS-Aware Function Composition Scheduling in Apache OpenWhisk</title><link>https://grussorusso.github.io/publications/starless2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grussorusso.github.io/publications/starless2022/</guid><description>Function-as-a-Service (FaaS) is increasingly popular thanks to the benefits provided to application developers and operators. Besides commercial Cloud-based offerings, open-source solutions have emerged enabling FaaS deployment on private infrastructures and possibly at the edge of the network. When moving from the Cloud to Fog/Edge environments, optimizing resource allocation for function execution becomes a critical challenge. Unfortunately, existing FaaS platforms have little or no support for fine-grained scheduling and resource allocation, nor allow users to enforce Quality-of-Service (QoS) requirements.</description></item></channel></rss>